# -*- coding: utf-8 -*-
"""Noise_scheduler.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19rbIWqtJJRhyyktuvLvHr2VU26Pos02x
"""

import torch
import numpy as np
import matplotlib.pyplot as plt
from datasets_gen import get_mnist_
import math

im_data=get_mnist_(normalize=True)

def noise_scheduler(x0,epsilon_noise,t):
  b,d,c,c=x0.shape
  at=math.pow(0.99,t)
  #noise=torch.randn(b,d,c,c)
  xt=math.sqrt(at)*x0+math.sqrt(1-at)*epsilon_noise
  return xt

x=im_data[:64]
x = x[:64].view(8, 8, 28, 28)
x = x.to('cpu')
image_np = x.numpy()

# Create a figure and a set of subplots arranged in an 8x8 grid
fig, axes = plt.subplots(8, 8, figsize=(8, 8))

# Iterate through the subplots and display each image
for i in range(8):
    for j in range(8):
        axes[i, j].imshow(image_np[i, j], cmap='gray')
        axes[i, j].axis('off')  # Turn off axis labels

plt.show()

x=im_data[:64]
x=x.view(64,1,28,28)

epsilon_noise=torch.randn(64,1,28,28)

x=noise_scheduler(x,epsilon_noise,1000)

x = x[:64].view(8, 8, 28, 28)
x = x.to('cpu')
image_np = x.numpy()

# Create a figure and a set of subplots arranged in an 8x8 grid
fig, axes = plt.subplots(8, 8, figsize=(8, 8))

# Iterate through the subplots and display each image
for i in range(8):
    for j in range(8):
        axes[i, j].imshow(image_np[i, j], cmap='gray')
        axes[i, j].axis('off')  # Turn off axis labels
plt.show()