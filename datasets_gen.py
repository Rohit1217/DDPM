# -*- coding: utf-8 -*-
"""datasets_gen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wjufyt455sFQcEsx_tI_2chx_eb6K5vy
"""

import torch
from torchvision import transforms,datasets
from torch.utils.data import TensorDataset
import matplotlib.pyplot as plt
import torch.nn.functional as F

def get_mnist_(quantize=256,normalize=False,device='cpu',shift=False,flatten=False,pad=0):

  transform=transforms.Compose([transforms.ToTensor()])
  trainset = datasets.MNIST('~/.pytorch/MNIST_data/', download=True, train=True, transform=transform)
  b,t,c=trainset.data.shape
  quant=(256.0/quantize)
  data=(trainset.data)//quant
  data=data.view(b, 1, c, c)  # Reshape data tensor to have dimensions (b, 1, c, c)

  if pad > 0:
    data = F.pad(data, (1, pad-1, 1, pad-1), mode='constant', value=-1)
    data = data.view(b, 1, c + pad, c + pad)

  if normalize:
    mean = quantize//2
    var =  quantize-quantize//2
    data= (data-mean)/var

  if flatten:
    data=data.view(b,t*c)

  if shift:
    new_column=torch.full((b,1),((-1)//quantize))
    data = torch.cat((new_column, data[:, :-1]), dim=1)

  data=data.to(device)
  dataset=TensorDataset(data,data)
  trainloader = torch.utils.data.DataLoader(dataset, batch_size=64, shuffle=True)
  return trainloader


def get_cifar10(normalize=True,device='cpu',size=31):
    transform = transforms.Compose([
      transforms.ToTensor(),
      transforms.Lambda(lambda x: x[:, 1:, 1:]),
      transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
    ])

    trainset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)
    return trainloader

def data_visualizer(trainloader,save=False,b=8):
  for img,_ in trainloader:
     x=img[:b*b]
     break
  x=x*0.5+0.5
  b,d,c,c=x.shape
  if d!=1:
    x=x.permute(0,2,3,1) 
    x=x.view(b,b,c,c,d)
  else:
    x=x.view(b,b,c,c)
  x = x.numpy()
  fig, axes = plt.subplots(b, b, figsize=(b, b))
  # Iterate through the subplots and display each image
  for i in range(8):
      for j in range(8):
          axes[i, j].imshow(x[i,j])  # Normalize pixel values to [0, 1]
          axes[i, j].axis('off') 
  if save:
    plt.savefig('samples.jpeg')
  plt.show()
  return

def img_visualizer(img):
  img=img*0.5+0.5
  d,c,c=img.shape
  if c!=1:
    img=img.permute(1,2,0)
  img = img.numpy()
  plt.imshow(img,cmap='gray')  
  plt.axis('off') 
  plt.show()
  return


''' for img,_ in get_cifar10():
  x=img[:64]
  print(x[0])
  break '''